name: Build Android APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    name: Build for Android
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-global-
      
      - name: Cache Buildozer directory
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Cache Android SDK/NDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/sdk
            ~/.android/ndk
          key: android-sdk-ndk-${{ runner.os }}-v2
          restore-keys: |
            android-sdk-ndk-${{ runner.os }}-
      
      - name: Verify project structure
        run: |
          echo "Project structure:"
          ls -la
          echo "Checking required files:"
          test -f main.py && echo "✓ main.py exists" || echo "✗ main.py missing"
          test -f main.kv && echo "✓ main.kv exists" || echo "✗ main.kv missing"
          test -f buildozer.spec && echo "✓ buildozer.spec exists" || echo "✗ buildozer.spec missing"
          test -f Logo.png && echo "✓ Logo.png exists" || echo "✗ Logo.png missing"
          test -f Reseau.txt && echo "✓ Reseau.txt exists" || echo "✗ Reseau.txt missing"
          test -d Flags && echo "✓ Flags directory exists" || echo "✗ Flags directory missing"
          test -d Reso && echo "✓ Reso directory exists" || echo "✗ Reso directory missing"
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            python3-pip \
            python3-setuptools \
            python3-wheel \
            openjdk-11-jdk \
            unzip \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            llvm \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            libffi-dev \
            liblzma-dev
      
      - name: Configure network and retry settings
        run: |
          # Augmenter les timeouts réseau
          echo "net.ipv4.tcp_keepalive_time = 600" | sudo tee -a /etc/sysctl.conf
          echo "net.core.netdev_max_backlog = 5000" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          
          # Configurer Git pour les gros téléchargements
          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
          
          # Configurer pip pour les retries
          pip config set global.timeout 60
          pip config set global.retries 10
          pip config set global.trusted-host "pypi.org pypi.python.org files.pythonhosted.org"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer
          pip install cython
          pip install wheel
          pip install setuptools
      
      - name: Validate buildozer.spec
        run: |
          echo "Validating buildozer.spec configuration..."
          if ! buildozer --version; then
            echo "Error: Buildozer not properly installed"
            exit 1
          fi
          
          # Vérifier la syntaxe du buildozer.spec
          python -c "
          import configparser
          config = configparser.ConfigParser()
          try:
              config.read('buildozer.spec')
              print('✓ buildozer.spec syntax is valid')
          except Exception as e:
              print('✗ buildozer.spec syntax error:', e)
              exit(1)
          "
      
      - name: Build with Buildozer (with retry)
        run: |
          # Fonction de retry pour le build
          build_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Build attempt $attempt/$max_attempts"
              
              if timeout 45m buildozer android debug; then
                echo "✓ Build successful on attempt $attempt"
                return 0
              else
                echo "✗ Build failed on attempt $attempt"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "Cleaning up for retry..."
                  # Nettoyer les téléchargements partiels
                  rm -rf .buildozer/android/platform/build-*
                  rm -rf .buildozer/android/platform/python-for-android/dists
                  
                  echo "Waiting 30 seconds before retry..."
                  sleep 30
                fi
                
                attempt=$((attempt + 1))
              fi
            done
            
            echo "✗ All build attempts failed"
            return 1
          }
          
          # Lancer le build avec retry
          build_with_retry
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx2048m -XX:MaxPermSize=512m'"
          JAVA_OPTS: "-Xmx2048m"
          BUILDOZER_LOG_LEVEL: 2
          PYTHONUNBUFFERED: 1
      
      - name: Find APK file
        id: find-apk
        run: |
          echo "Looking for APK files..."
          find . -name "*.apk" -type f
          
          APK_PATH=$(find . -name "*.apk" -type f | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "✓ Found APK: $APK_PATH"
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            
            # Obtenir des informations sur l'APK
            ls -lh "$APK_PATH"
            file "$APK_PATH"
          else
            echo "✗ No APK file found"
            exit 1
          fi
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ steps.find-apk.outputs.apk_path }}
          retention-days: 30
      
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .buildozer/
            *.log
          retention-days: 5
      
      - name: Create Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: ${{ steps.find-apk.outputs.apk_path }}
          body: |
            🚀 **Nouvelle version de Cotiser**
            
            📱 **APK Android** généré automatiquement
            
            **Changements:**
            - Build automatique via GitHub Actions
            - Optimisations de performance
            - Corrections de bugs
            
            **Installation:**
            1. Téléchargez le fichier APK
            2. Activez "Sources inconnues" dans les paramètres Android
            3. Installez l'APK
            
            **Informations techniques:**
            - Build #${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Date: ${{ steps.get-date.outputs.date }}
      
      - name: Build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "${{ steps.find-apk.outputs.apk_path }}" ]; then
            echo "| APK Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            echo "| APK Size | $(ls -lh "${{ steps.find-apk.outputs.apk_path }}" | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| APK Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| Build Time | $(date) |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
